@page
@using BaGet.Protocol.Models
@model IndexModel

@{
    ViewData["Title"] = "Packages";
}

<div class="search-options form-inline">
    <div class="form-group">
        <label>Package type:</label>

        <div class="search-dropdown">
            <div class="dropdown">
                <button class="btn btn-default dropdown-toggle" type="button" id="package-type" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                    @{
                        // TODO: Use switch expression when upgrade to C#8
                        switch (Model.PackageType)
                        {
                            case "dependency": <text>Dependency</text> break;
                            case "dotnettool": <text>.NET tool</text> break;
                            case "dotnettemplate": <text>.NET template</text> break;
                            default: <text>Package type</text> break;
                        }
                    }
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" aria-labelledby="package-type">
                    <li><a href="@SearchLink(packageType: string.Empty)">Any</a></li>
                    <li><a href="@SearchLink(packageType: "dependency")">Dependency</a></li>
                    <li><a href="@SearchLink(packageType: "dotnettool")">.NET tool</a></li>
                    <li><a href="@SearchLink(packageType: "dotnettemplate")">.NET template</a></li>
                </ul>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label>Framework:</label>

        <div class="search-dropdown">
            <div class="dropdown">
                <button class="btn btn-default dropdown-toggle" type="button" id="framework" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                    Framework
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu" aria-labelledby="framework">
                    <li><a href="#">Any</a></li>

                    <li role="separator" class="divider"></li>
                    <li class="dropdown-header">.NET</li>
                    <li><a href="#">.NET 5</a></li>

                    <li role="separator" class="divider"></li>
                    <li class="dropdown-header">.NET Standard</li>
                    <li><a href="#">.NET Standard 2.1</a></li>
                    <li><a href="#">.NET Standard 2.0</a></li>
                    <li><a href="#">.NET Standard 1.6</a></li>
                    <li><a href="#">.NET Standard 1.5</a></li>
                    <li><a href="#">.NET Standard 1.4</a></li>
                    <li><a href="#">.NET Standard 1.3</a></li>
                    <li><a href="#">.NET Standard 1.2</a></li>
                    <li><a href="#">.NET Standard 1.1</a></li>
                    <li><a href="#">.NET Standard 1.0</a></li>

                    <li role="separator" class="divider"></li>
                    <li class="dropdown-header">.NET Core</li>
                    <li><a href="#">.NET Core 3.1</a></li>
                    <li><a href="#">.NET Core 3.0</a></li>
                    <li><a href="#">.NET Core 2.2</a></li>
                    <li><a href="#">.NET Core 2.1</a></li>
                    <li><a href="#">.NET Core 1.1</a></li>
                    <li><a href="#">.NET Core 1.0</a></li>

                    <li role="separator" class="divider"></li>
                    <li class="dropdown-header">.NET Framework</li>
                    <li><a href="#">.NET Framework 4.8</a></li>
                </ul>
            </div>
        </div>
    </div>

    <div class="form-group form-check">
        <label for="prerelease">Include prerelease:</label>

        <input
            type="checkbox"
            id="prerelease"
            @(Model.IncludePrerelease == true ? "checked='checked'" : "")
            onclick="window.location.href='@SearchLink(includePrelease: !(Model.IncludePrerelease ?? false))'" />
    </div>
</div>

@if (Model.Packages.Count == 0)
{
    <div>
        <h2>Oops, nothing here...</h2>
        <p>
            It looks like there's no package here to see. Take a look below for useful links.
        </p>
        <p><a asp-page="/Upload">Upload a package</a></p>
        <p><a href="https://loic-sharma.github.io/BaGet/" target="_blank" rel="noopener noreferrer">BaGet documentation</a></p>
        <p><a href="https://github.com/loic-sharma/BaGet/issues" target="_blank" rel="noopener noreferrer">BaGet issues</a></p>
    </div>
}
else
{
    @foreach (var package in Model.Packages)
    {
        <div class="row search-result">
            <div class="col-sm-1 hidden-xs hidden-sm">
                <img src="@IconLink(package)"
                     class="package-icon img-responsive"
                     onerror="this.src='@Url.Content("~/images/default-package-icon-256x256.png")'"
                     alt="The package icon" />
            </div>
            <div class="col-sm-11">
                <div>
                    <a asp-page="Package"
                       asp-route-id="@package.PackageId"
                       asp-route-version="@package.Version"
                       class="package-title">
                        @package.PackageId
                    </a>
                    <span>by: @string.Join(" ", package.Authors)</span>
                </div>
                <ul class="info">
                    <li>
                        <span>
                            <i class="ms-Icon ms-Icon--Download"></i>
                            @package.TotalDownloads.ToMetric() total downloads
                        </span>
                    </li>
                    <li>
                        <span>
                            <i class="ms-Icon ms-Icon--Flag"></i>
                            Latest version: @package.Version
                        </span>
                    </li>
                    @if (package.Tags.Any())
                    {
                        <li>
                            <span class="tags">
                                <i class="ms-Icon ms-Icon--Tag"></i>
                                @string.Join(" ", package.Tags)
                            </span>
                        </li>
                    }
                </ul>
                <div>
                    @package.Description
                </div>
            </div>
        </div>
    }
}

@functions {

    private string SearchLink(
        string packageType = null, string framework = null, bool? includePrelease = null)
    {
        // Use model's value if the argument was skipped.
        packageType = packageType ?? Model.PackageType;
        framework = framework ?? Model.Framework;
        includePrelease = includePrelease ?? Model.IncludePrerelease;

        // Remove query parameters that have default value
        if (packageType == string.Empty) packageType = null;
        if (framework == string.Empty) framework = null;
        if (includePrelease == false) includePrelease = null;

        return Url.Page("Index", new
        {
            packageType = packageType,
            framework = framework,
            includePrerelease = includePrelease,
        });
    }

    private string IconLink(SearchResult package)
    {
        return Url.RouteUrl(
            Routes.PackageDownloadIconRouteName,
            new
            {
                id = package.PackageId,
                version = package.Version
            });
    }
}
